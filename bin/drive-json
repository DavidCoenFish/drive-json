#!/usr/bin/env node

const FileSystem = require("fs");
const Q = require("q");
const VersionHelper = require("../index.js")
const packageName = require("../package.json").name
const packageVersion = require("../package.json").version
const DriveJson = require("../index.js")

main(process.argv.slice(2));

function main(in_argv) {
	if (0 == in_argv.length) {
		return help();
	}

	//collect state into an object to make it expicit that state is shared between the promice closures
	const state = {
		"credentialsPath" : undefined,
		"keyFile" : undefined,
		"dataServer" : undefined,
		"dataSet" : {},
		"baseObject" : {}
	};
	const promiceArray = [];

	while (0 != in_argv.length) {
		const token = in_argv.shift();
		switch (token) {
			default:
			case "-h": case "--help": case "-?":
				help();
				return;
			case "-c": case "--credentialsPath":
				state.credentialsPath = in_argv.shift();
				break;
			case "-s": case "--clientSecretPath": {
					const clientSecretPath = in_argv.shift();
					promiceArray.push(DriveJson.DevGoogleHelper.createOAutho2ClientPromise(clientSecretPath, state.credentialsPath));
				}
				break;
			case "-e": case "--email":
				state.email = in_argv.shift();
				break;
			case "-k": case "--keyfile":
				state.keyFile = in_argv.shift();
				break;
			case "-d": case "--dataSet":
				const data = in_argv.shift();
				state.dataSet[data] = undefined;
				break;
			case "-3": case "--sheet3rd": {
					const drivepath = in_argv.shift();
					promiceArray.push(makeSheetToObjectPromice(state, drivepath, DriveJson.SheetToObject.sheet3rdToObject)); 
				}
				break;
			case "-5": case "--sheet5th": {
					const drivepath = in_argv.shift();
					promiceArray.push(makeSheetToObjectPromice(state, drivepath, DriveJson.SheetToObject.sheet5thToObject)); 
				}
				break;
			case "-v": case "--sheet3rdKeyValue": {
					const drivepath = in_argv.shift();
					promiceArray.push(makeSheetToObjectPromice(state, drivepath, DriveJson.SheetToObject.sheet3rdKeyValueToObject)); 
				}
				break;
			case "-o": case "--outjson": {
					const outPath = in_argv.shift();
					promiceArray.push(makeOutJsonPromice(state, outPath)); 
				}
				break;
		}
	}

	Q.allSettled(promiceArray).then(function(input){
		var exitCode = 0;
		for(var index = 0; index < input.length; ++index){
			var item = input[index];
			if (item.state === "rejected"){
				exitCode = 1; //error
				console.log("FAILED:" + item.reason);
			}
		}

		return exitCode;
	},function(error){
		console.log("main errorA:" + error);
		process.exit(1); //error
	}).fail(function(error){
		console.log("main errorB:" + error);
		process.exit(1); //error
	}).done(function(input){
		process.exit(input);
	});

	return;
}

function help () {
	const message = [packageName + " " + packageVersion,
		"convert data from google drive into json data. connection authority uses google-oauth-jwt",
		"usage:",
		"    drive-json [options]",
		"",
		"sample:",
		"    drive-json --email foo@developer.gserviceaccount.com --keyfile ./data/key.pem --sheet3rd /proj01/dev/sheetA:worksheetA --outjson ./output/foo.json",
		"        using given email and keyfile, add the data from the google drive spreadsheet at the given location in 3rd normalised form, and save result data as json",
		"",
		"options:",
		"-h --help -?",
		"    generate this text",
		"-c --credentialsPath <file path>",
		"    a text file containing the credential string access by following the url generated when this param is missing",
		"-s --clientSecretPath <file path>",
		"    a json file containing the client secret json data for the OAuth client ID https://developers.google.com/drive/api/v3/quickstart/nodejs",
		"-d --dataSet <lable>",
		"    add lable to the allowed dataSet for filtering sheet3rdKeyValue sheets",
		"-3 --sheet3rd <drive relative path to sheet : worksheet>",
		"    append the result data with data sourced from google spread sheet worksheet in 3rd normalised form and trated as id : object",
		"-5 --sheet5th <drive relative path to sheet : worksheet>",
		"    append the result data with data sourced from google spread sheet worksheet in 5th normalised form and treated as key : value",
		"-v --sheet3rdKeyValue <drive relative path to sheet : worksheet>",
		"    append the result data with data sourced from google spread sheet worksheet in 3rd normalised form filtered by dataset and treated as key : value",
		"-o --outjson <output json filepath>",
		"    specify the file location to save a json  representation of the result data"

		].join("\n");
	console.log(message);
}

function makeSheetToObjectPromice(inout_state, in_drivepath, in_sheetToObjectCallback) {
	if (undefined === inout_state.dataServer){
		inout_state.dataServer = DriveJson.DataServer.factory(inout_state.email, inout_state.keyFile);
	}
	return DriveJson.DriveCursor.factoryResolvePromice(
		DriveJson.DriveCursor.factory(inout_state.dataServer), in_drivepath).then(function(driveCursor){
			const cursor = DriveJson.Cursor.factory(inout_state.dataSet);
			return in_sheetToObjectCallback(inout_state.dataServer, driveCursor, cursor, inout_state.baseObject);
		});
}

function makeOutJsonPromice(inout_state, in_outPath) {
	const deferred = Q.defer();
	try {
		const data = JSON.stringify(inout_state.baseObject);
		FileSystem.writeFile(in_outPath, data, function(error){
			if (undefined !== error){
				deferred.reject(error);
			} else {
				deferred.resolve(true);
			}
		});
	} catch (error) {
		deferred.reject(error);
	}
	return deferred;
}
